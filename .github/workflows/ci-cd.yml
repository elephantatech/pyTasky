name: CI

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync

      - name: Run black (check only)
        run: uv run black --check src/ tests/

      - name: Run tests with xvfb
        run: |
          sudo apt-get install -y xvfb
          xvfb-run uv run pytest tests/ --cov=src --cov-report=term-missing

  build-and-release:
    needs: test
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "$HOME/.local/bin" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          $env:PATH = "$env:HOME\.local\bin;$env:PATH"
          uv sync

      - name: Build executable with PyInstaller
        run: uv run pyinstaller --onefile --name pytasky --add-data "src/version.txt;." --add-data "icon.png;." --add-data "logo.png;." --noconsole src/pytasky.py

      - name: Read version from file
        id: read_version
        run: echo "::set-output name=version::$(cat src/version.txt)"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.read_version.outputs.version }}
          release_name: Release v${{ steps.read_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/pytasky.exe
          asset_name: pytasky-v${{ steps.read_version.outputs.version }}-windows.exe
          asset_content_type: application/octet-stream

    permissions:
      contents: write